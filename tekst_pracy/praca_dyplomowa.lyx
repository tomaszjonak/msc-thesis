#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass aghdpl
\begin_preamble
% \documentclass{aghdpl}               % przy kompilacji programem latex
% \documentclass[pdflatex,en]{aghdpl}  % praca w języku angielskim
% dodatkowe pakiety
\usepackage{enumerate}
\usepackage{listings}
% Numeracja po kolei rysunkow, tabel i wzorow
\usepackage{chngcntr}
\counterwithout{figure}{chapter}
\counterwithout{table}{chapter}
\counterwithout{equation}{chapter}
%
\lstloadlanguages{TeX}
\usepackage{caption} 
\captionsetup[figure]{labelformat=simple, labelsep=period}
\captionsetup[table]{labelformat=simple, labelsep=period}
\captionsetup[algorithm]{labelformat=simple, labelsep=period}
%\captionsetup{font=small}
\captionsetup{margin=10pt, font={small}, labelfont=bf, format=hang}
\usepackage{esint}
\clubpenalty = 10000
\widowpenalty = 10000
%\usepackage{graphicx}
%\usepackage{grfext}
%\AtBeginDocument{%
% \PrependGraphicsExtensions*{
%    .mps,.MPS,.pdf,.PDF,.eps,.EPS,.ps,.PS,
%    .png,.PNG,.jpg,.jpeg,.JPG,.JPEG,
%    .funny,.foobar
%  }%
%  \PrintGraphicsExtensions % see .log file
%}
% \usepackage[style=numeric-comp]{biblatex}
% \setlength{\itemsep}{-1\parsep}
%---------------------------------------------------------------------------
%\usepackage{epstopdf}
\end_preamble
\options pdflatex
\use_default_options true
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding iso8859-2
\fontencoding global
\font_roman "utopia" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics none
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement H
\paperfontsize 12
\spacing onehalf
\use_hyperref true
\pdf_title "dyplom"
\pdf_author "Imie Nazwisko"
\pdf_subject "Temat"
\pdf_keywords "słowa kluczowe"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 0
\use_package amssymb 0
\use_package cancel 1
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style bst/IEEEtran
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language={C++},alsolanguage={bash},breaklines=true,fontadjust=true,numberstyle={\tiny},stepnumber=1,numbersep={-7pt},numbers=right,numberstyle={\tiny},backgroundcolor={\color{cream}},basicstyle={\small}"
\tracking_changes false
\output_changes false
\html_math_output 3
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{Tomasz Jonak}
\end_layout

\begin_layout Plain Layout


\backslash
shortauthor{T.
 Jonak}
\end_layout

\begin_layout Plain Layout


\backslash
titlePL{Opracowanie oprogramowania do kompresji, przesylu oraz skladowania
 danych ze zdalnego systemu pomiaru parametrow ruchu drogowego}
\end_layout

\begin_layout Plain Layout


\backslash
titleEN{Development of software for compressing, transmitting and storing
 data from remote traffic measurement system}
\end_layout

\begin_layout Plain Layout


\backslash
shorttitle{Praca Magisterska}
\end_layout

\begin_layout Plain Layout


\backslash
faculty{Wydział Elektrotechniki, Automatyki,
\backslash

\backslash
Informatyki i Inżynierii Biomedycznej}
\end_layout

\begin_layout Plain Layout


\backslash
division{Katedra Metrologii i Elektroniki}
\end_layout

\begin_layout Plain Layout


\backslash
specialization{Automatyka i Robotyka}
\end_layout

\begin_layout Plain Layout


\backslash
thesistype{Praca dyplomowa magisterska}
\end_layout

\begin_layout Plain Layout


\backslash
supervisor{dr inż.
 Zbigniew Marszałek}
\end_layout

\begin_layout Plain Layout


\backslash
acknowledgements{Wymaga odkomentowania linijek w aghdpl.cls} 
\end_layout

\begin_layout Plain Layout


\backslash
date{2017} 
\end_layout

\begin_layout Plain Layout


\backslash
titlepages
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{tocdepth}{2}
\end_layout

\begin_layout Plain Layout

%Te linijki zamieniaja Tabela i Rysunek na Tab.
 i Rys.
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand*{
\backslash
tablename}{Tab.}
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand*{
\backslash
figurename}{Rys.}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Wprowadzenie
\begin_inset CommandInset label
LatexCommand label
name "chap:wprowadzenie"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Głównymi zaletami edytora \SpecialChar LyX
 jest automatyczna numeracja obiektów – rysunków,
 tabel, algorytmów, wzorów, rozdziałów, bibliografii i innych.
 Oznacza to, że użytkownik może skupić się na tekście – nie musi myśleć
 o tym, czy numeracja w tekście i przy danym rysunku lub tabeli będzie prawidłow
a, gdy przeniesie jeden podrozdział w inne miejsce swojej pracy.
 Numeracją zajmie się \SpecialChar LyX
 poprzez mechanizm etykiet.
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Cel pracy
\end_layout

\begin_layout Standard
Niniejsza praca powstała w celu zaprojektowania oraz wdrożenia systemu służącego
 automatycznemu przesyłowi danych ze stanowiska pomiarowego do przestrzeni
 magazynowania w katedrze metrologii wydziału EAIiIB AGH w warunkach ograniczone
j przepustowości łącza.
\end_layout

\begin_layout Section*
Zakres pracy
\end_layout

\begin_layout Standard
Praca obejmuje analizę danych generowanych przez stanowisko pomiarowe, oszacowan
ie strumienia generowanych danych oraz przepustowości łącza, dobór metod
 kompresji, opracowanie mechanizmu ochrony przed utratą danych oraz projekt
 oraz implementację oprogramowania realizującego pobór, kompresję, przesył
 oraz składowanie danych.
\end_layout

\begin_layout Section*
Układ pracy
\end_layout

\begin_layout Standard
W rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:opis_problemu"

\end_inset

 przedstawiono informacje na temat stanowiska pomiarowego oraz analizę sposobu
 generowania danych.
 W rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:warstwa_sieciowa"

\end_inset

 omówiono dostępne rozwiązania przesyłu danych.
 W rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:synchronizacja_danych"

\end_inset

 przedstawiono przewidywane problemy w środowisku pracy oraz możliwe sposoby
 ich rozwiązania.
 Rozdział 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:kompresja"

\end_inset

 zawiera opis formatów generowanych danych, listę popularnych schematów
 kompresji oraz analizę ich sprawności w badanym przypadku oraz wybór schematu
 zastosowanego w implementowanym rozwiązaniu.
 Rozdział 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Architektura-rozwiazania"

\end_inset

 opisuje sposób działania programów klienckiego i serwerowego, dostępne
 alternatywne podejścia oraz powody ich zastosowania.
\end_layout

\begin_layout Chapter
Wstęp teoretyczny 
\begin_inset Note Note
status open

\begin_layout Plain Layout
nazwac to jakos
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Kompresja danych
\end_layout

\begin_layout Standard
Jest to transformacja która reprezentuje tą samą informację za pomocą mniejszej
 ilości bitów.
 Wyróżniamy kompresje stratną i bezstratną.
 Kompresja bezstratna zakłada istnienie nadmiarowości (redundancji) w wejściowej
 reprezentacji informacji którą można wykryć i usunać, przykładem tego typu
 kompresji jest kodowanie Huffmana (ang.
 Huffman coding)
\begin_inset CommandInset citation
LatexCommand cite
key "huffman_encoding"

\end_inset

.
 Kompresja stratna stosowana jest w przypadku gdy można wyróżnić mniej istotne
 dane i je odrzucić, przykładem takiej sytuacji jest zmniejszenie ilości
 kolorów w reprezentacji graficznej oraz usunięcie szumu w zapisie dźwiękowym.
 Przykładami tego typu kompresji są standardy JPEG
\begin_inset CommandInset citation
LatexCommand cite
key "jpeg_paper"

\end_inset

 oraz H.264
\begin_inset CommandInset citation
LatexCommand cite
key "h264_paper"

\end_inset

.
\end_layout

\begin_layout Section*
Podstawowe pojęcia obróbki plików multimedialnych
\end_layout

\begin_layout Standard
Plik wideo składa się z jednego bądź więcej 
\series bold
strumieni danych
\series default
 (ang.
 data stream).
 Strumień danych jest reprezentacją jednego bądź więcej sygnałów zapisanych
 w pewnym 
\series bold
formacie
\series default
.
 Format taki zazwyczaj posiada zestaw pożądanych cech takich jak dostosowanie
 do przesyłu bądź składowania czy szyfrowania.
 Reprezentacja danych zawarta w pliku zazwyczaj różni się od postaci która
 jest zdatna do odtworzenia (wyświetlenia, odegrania) i wymaga przetworzenia.
 Format podstawowy danego typu nazywany jest formatem nieprzetworzonym (ang.
 raw).
 W przypadku danych video reprezentacją nieprzetworzoną może być macierz
 pikseli.
 Transformacje wizyjne prowadzone są na tego typu reprezentacji.
\end_layout

\begin_layout Standard
Do przetworzenia danych stosowany jest 
\series bold
kodek
\series default
, jest to urządzenie, biblioteka bądź program udostępniający dwie składowe.
\end_layout

\begin_layout Itemize
Enkoder
\end_layout

\begin_layout Itemize
Dekoder
\end_layout

\begin_layout Standard
Enkoder służy konwersji strumienia do danego formatu - enkdowoanie.
 Dekoder realizuje odwrotną funkcjonalność - dekodowanie.
 Format wejściowy dla obu czynności nie jest wyspecyfikowany.
 Konwersja może mieć miejsce zarówno z danych nieprzetworzonych jak i dowolnego
 innego formatu.
\end_layout

\begin_layout Standard
Przykładem oprogramowania realizującego funkcje kodeka jest pakiet ffmpeg.
 Zawiera on bogaty zestaw zestaw kodeków.
 Można za jego pomocą zrealizować konwersję z formatu MJPEG do H.264 która
 jest stosowana w pracy.
\end_layout

\begin_layout Section*
Kontener (plik multimedialny)
\end_layout

\begin_layout Standard
Jest to rodzina formatów plików służący do przechowywania i synchronizacji
 wielu strumieni danych jednocześnie.
 Tego typu strumienie nazywane są ścieżkami.
 Dodatkową funkcjonalnością realizowaną przez kontener jest przechowywanie
 informacji służących do synchronizacji ścieżek w czasie.
 W przypadku plików wideo pozwala to na zagwarantowanie, że dźwięk i obraz
 w filmie nie będą się przesuwać względem siebie.
\end_layout

\begin_layout Standard
Specyfikacje formatów kontenerów zazwyczaj nie ustalają z góry jakie formaty
 strumieni danych mają zostać użyte.
 Informacja taka jest składowana razem ze ścieżkami w tzw.
 metadanych zawartych w pliku.
 Tym sposobem informacja o kodowaniu jest zapisywana razem z danymi.
 
\begin_inset CommandInset citation
LatexCommand cite
key "ho2015handbookContainers"

\end_inset


\end_layout

\begin_layout Standard
Przykładem zastosowania kontenera jest przechowywanie filmu w formacie MP4
 który zawiera ścieżkę z obrazem, ścieżkę z dźwiękiem w języku angielskim
 oraz napisy w języku polskim.
 Dźwięk zsynchronizowany jest z ruchem ust aktorów na ścieżce audio a napisy
 wyświetlają się zgodnie z sekwencjami ze ścieżki dźwiękowej.
\end_layout

\begin_layout Section*
AVI
\end_layout

\begin_layout Standard
Format kontenerów (ang.
 Audio Video Interleave) multimedialnych składających się ze ścieżek audio,
 video oraz tekstu.
 Wprowadzony do użytku przez Microsoft w Listopadzie 1992 jako część pakietu
 Video for Windows.
 AVI bazuje na standardzie RIFF (ang.
 Resource Interchange File Format).
\end_layout

\begin_layout Standard
Standard RIFF dzieli plik na segmenty (ang.
 chunk) które można zagnieżdżać bądź szeregować (segment typu list).
 Każdy segment identyfikowany jest przez ciąg 4 bajtów, kod FourCC (ang.
 four character code).
 Kody tego typu stosowane są do identyfikowania kodeków, oraz formatów kompresji
, kolorów czy kodowania pikseli.
\begin_inset CommandInset citation
LatexCommand cite
key "fourCCspec"

\end_inset


\end_layout

\begin_layout Standard
Format AVI zdefiniowany jest jako pojedynczy segment o identyfikatorze 
\begin_inset Quotes pld
\end_inset

AVI 
\begin_inset Quotes prd
\end_inset

 (spacja na ostatnim znaku).
 W którym zagnieżdżone są dwa segmenty typu LIST.
 
\begin_inset CommandInset citation
LatexCommand cite
key "microsoftAviSpec"

\end_inset


\end_layout

\begin_layout Itemize
hdrl
\end_layout

\begin_layout Itemize
movi
\end_layout

\begin_layout Standard
Lista hdrl zaczyna się segmentem avih który opisuje główny nagłówek pliku
 AVI, zawiera on informacje takie jak ilość strumieni danych, odstęp w mikroseku
ndach pomiędzy ramkami video, wymiary ramki czy obecność elementów opcjonalnych.
 Następnie pojawia się jeden bądź więcej segmentów strl typu LIST opisujących
 poszczególne ścieżki zawarte w pliku.
 Segment tego typu składa się z segmentu z dwóch części obowiązkowych: strh
 - nagłówka ścieżki, segmentu strf - formatu ścieżki oraz dwóch opcjonalnych:
 nagłówka danych ścieżki - strd i nazwy ścieżki - strn.
\end_layout

\begin_layout Standard
Nagłówek ścieżki zawiera typ ścieżki (audio, video, tekst lub midi), informacje
 o synchronizacji czasowej oraz pakiet metadanych dotyczących układu ścieżki
 w pliku.
 
\begin_inset CommandInset citation
LatexCommand cite
key "strh"

\end_inset

.
 Segmenty opcjonalne zawierają odpowiednio: dane specyficzne dla kodeka
 danej ścieżki oraz nazwę ścieżki.
\end_layout

\begin_layout Standard
Lista movi zawiera same ścieżki, dane składowe ścieżki mogą być segmentami
 bezpośrednio w liście movi bądź znajdować się w zagnieżdzoncyh listach
 o typie 
\begin_inset Quotes pld
\end_inset

rec 
\begin_inset Quotes pld
\end_inset

.
 Przynależność segmentu do strumienia odczytywana jest z kodu FourCC, który
 zawiera również informacje o przeznaczeniu segmentu.
 Wyróżnianie są cztery przeznaczenia.
\end_layout

\begin_layout Itemize
db - wideo nieskompresowane
\end_layout

\begin_layout Itemize
dc - wideo skompresowane
\end_layout

\begin_layout Itemize
pc - zmiana palety kolorów
\end_layout

\begin_layout Itemize
wb - dane audio
\end_layout

\begin_layout Standard
Kod segmentów listy movi na dwóch wyższych bajtach zawiera numer strumienia,
 dwa niższe przeznaczenie.
 Przykładowy segment nieskompresowanego wideo należący do strumienia pierwszego
 identyfikujemy kodem 
\begin_inset Quotes pld
\end_inset

01db
\begin_inset Quotes prd
\end_inset

.
 Warto nadmienić że numerowanie zaczyna się od zera, w pliku z jednym strumienie
m segmenty miałyby kod 
\begin_inset Quotes pld
\end_inset

00xx
\begin_inset Quotes prd
\end_inset

, gdzie xx oznacza typ strumienia.
\end_layout

\begin_layout Standard
Użycie 2 bajtów na identyfikację przynależności do strumienia warunkuje
 również górną granicę ilości ścieżek w pliku avi, jest to 
\begin_inset Formula $2^{8}=256$
\end_inset

.
\end_layout

\begin_layout Section*
H.264/MPEG-4 AVC
\end_layout

\begin_layout Standard
In response to the need of a more efficient video coding technique for diversifi
ed networks and applications,
\end_layout

\begin_layout Standard
Standard kompresji ścieżek video.
 Stworzony w ramach kolaboracji ITU-T VCEG oraz ISO/IEC MPEG, dwóch ciał
 standaryzacyjnych odpowiedzialnych za formaty multimedialne.
 
\begin_inset CommandInset citation
LatexCommand cite
key "h264_paper"

\end_inset


\end_layout

\begin_layout Standard
Celem tego standardu jest zapewnienie wysokiej jakości wideo przy istotnym
 zmniejszeniu szerokości pasma wymaganego do zapisu/przesyłu danych wideo.
 W porównaniu ze swoim poprzednikiem, standardem H.263 czy standardem MPEG-4
 part 2 H.264 wymaga o 50% mniej zasobów na zakodowanie strumienia.
 Wartość ta liczona jest w bitach na sekundę filmu (ang.
 bit rate).
\end_layout

\begin_layout Standard
Standard ten jest szeroko wykorzystywany w kodowaniu filmów w sieci, korzystają
 z niego między innymi serwisy Youtube, Vimeo, Itunes Store, używany jest
 również w dyskach typu Blu-ray.
 Używany jest również do dostarczania audycji telewizyjnych - standardy
 ISDB-T, DVB-T or DVB-T2.
\end_layout

\begin_layout Standard
H.264 jest standardem częściowo objętym patentami, komercyjne wykorzystanie
 dekoderów wymaga wykupienia stosownych licencji.
 
\begin_inset CommandInset citation
LatexCommand cite
key "h264patent"

\end_inset


\end_layout

\begin_layout Standard
Wysoka kompresja strumienia uzyskiwana jest dzięki zastosowaniu szeregu
 technik kodowania takich jak:
\end_layout

\begin_layout Itemize
Inter-picture prediction
\end_layout

\begin_layout Itemize
MBAFF (ang.
 Macroblock-adaptive frame-field coding)
\end_layout

\begin_layout Itemize
PAFF (ang.
 Picture-adaptive frame-field coding)
\end_layout

\begin_layout Itemize
CABAC (ang.
 Context-adaptive binary arithmetic coding)
\end_layout

\begin_layout Itemize
VLC (ang.
 variable length coding)
\end_layout

\begin_layout Itemize
VBSMC (Variable block-size motion compensation)
\end_layout

\begin_layout Standard
Dekompozycja strumienia wejściowego jest wielopoziomowa, techniki aplikowane
 są w zależności od zidentyfikowanych cech segmentów wytworzonych na poprzednich
 etapach, dokładny opis zawarty jest w dokumencie dostarczanym przez autorów.
 
\begin_inset CommandInset citation
LatexCommand cite
key "h264_paper"

\end_inset


\end_layout

\begin_layout Subsection*
Motion Compensation
\end_layout

\begin_layout Standard
Rodzina algorytmów służących przewidywaniu stanu ramki wideo na podstawie
 poprzednich oraz przyszłych ramek.
 Technika ta skupia się na popularnym w filmach sposobie zmiany sceny w
 kolejnych ramkach.
 Podstawowymi transformacjami które zmieniają sceny jest przesunięcie kamery
 oraz poruszanie się obiektu na statycznej scenie.
 Zakodowanie informacji o przesunięciach pozwala na zmniejszenie zestawu
 informacji kodującego kolejne ramki obrazu co prowadzi do bardziej wydajnej
 kompresji.
 Standard H.264 używa algorytmu VBSMC należącego do tej rodziny.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/ramka_bazowa.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Kadr z filmu 
\begin_inset Quotes pld
\end_inset

Elephants Dream
\begin_inset Quotes prd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "rys:kadr_bazowy"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
(c) copyright 2006, Blender Foundation / Netherlands Media Art Institute
 / www.elephantsdream.org
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/ramka_roznicowa.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Różnica między kadrem z 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:kadr_bazowy"

\end_inset

 a kolejnym
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "rys:roznica_kadrow"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
(c) copyright 2006, Blender Foundation / Netherlands Media Art Institute
 / www.elephantsdream.org
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/ramka_przesunieta.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Różnica pomiędzy 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:kadr_bazowy"

\end_inset

a kolejnym przesuniętym w prawo o dwa piksele
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "rys:roznica_z_kompensacja"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
(c) copyright 2006, Blender Foundation / Netherlands Media Art Institute
 / www.elephantsdream.org
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sytuację ilustruje kodowanie obrazu za pomocą składowania różnic pomiędzy
 kolejnymi ramkami (klatkami/kadrami) filmu.
 Różnicę podstawową reprezentuje rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:roznica_kadrow"

\end_inset

 zaś różnicę w którym wzięto pod uwagę ruch kamery rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:roznica_z_kompensacja"

\end_inset

.
 Zapis z kompensacją zawiera zdecydowanie mniej informacji na rysunku co
 przekłada się na bardziej regularny ciąg bitów.
 Regularna struktura pozwala z kolei na dużo silniejszą kompresję co prowadzi
 do mniejszego wynikowego rozmiaru pliku i mniejszego bit rate.
\end_layout

\begin_layout Section*
Model TCP/IP
\end_layout

\begin_layout Standard
Abstrakcyjny model opisujący komunikację pomiędzy komputerami połączonymi
 internetem.
 Model ten opisuje pełen schemat komunikacji specyfikując sposób pakowania,
 adresowania, kierowania (ang.
 routing) i odbioru danych.
 Składa się z czterech warstw abstrakcji które służą klasyfikacji protokołów
 składowych.
 Zaczynając od najniższej:
\end_layout

\begin_layout Enumerate
Warstwa łącza (ang.
 link layer)
\end_layout

\begin_layout Enumerate
Warstwa sieci (ang.
 internet layer)
\end_layout

\begin_layout Enumerate
Warstwa transportowa (ang.
 transport layer)
\end_layout

\begin_layout Enumerate
Warstwa aplikacji (ang.
 application layer)
\end_layout

\begin_layout Standard
Warstwa łącza opisuje transmisję danych wewnątrz pojedynczego segmentu sieci.
 Komunikacja ta odbywa się za pomocą kanału fizycznego bezpośrednio łączącego
 dwie maszyny.
 Opisują adresację oraz sposób enkodowania.
 Adres warstwy łącza zwyczajowo nazywany jest adresem MAC (ang.
 Media Access Control).
 Przykładem tego rozwiązania jest połączenie kablem typu twisted-pair (tzw.
 skrętka) i użycie protokołu Ethernet.
\end_layout

\begin_layout Standard
Warstwa sieci opisuje komunikację urządzeń zlokalizowanych w różnych sieciach
 oraz sposób odnalezienia drogi do sieci docelowej (routing).
 Najpopularniejszym protokołem w tej warstwie jest Internet Protocol w wersji
 4.
 Protokół ten wprowadza również adresację warstwy sieciowej, tzw.
 adresy IP.
 Warstwa ta nie definiuje mechanizmów gwarantujących dotarcie danych do
 odbiorcy oraz nie specyfikuje kolejności w jakiej kwanty danych (pakiety)
 odbierze maszyna docelowa.
\end_layout

\begin_layout Standard
Warstwa transportowa opisuje sposób komunikacji pomiędzy usługami znajdującymi
 się na dwóch urządzeniach, wprowadza oddzielną adresację pozwalającą na
 rozróżnienie usług udostępnianych przez pojedyncze urządzenie - portów.
 Protokoły tej warstwy odpowiadają za poprawne współdzielenie kanału komunikacyj
nego przez wiele usług, serializację, deserializację, retransmisję oraz
 odtwarzanie oryginalnej kolejności danych.
 Najpopularniejszymi protokołami tej warstwy są UDP (ang.
 User Datagram Protocol) oraz TCP (Transfer Control Protocol).
\end_layout

\begin_layout Standard
Warstwa aplikacji definiuje sposób komunikacji pomiędzy serwisami.
 Jest to najszersza warstwa ze względu na potrzebę dostosowania do konkretnych
 problemów.
 Popularnym protokołem tej warstwy jest protokół HTTP (ang.
 Hypertext Transfer Protocol) służący transferowi i modyfikacji multimediów.
\end_layout

\begin_layout Subsection*
Datagram
\end_layout

\begin_layout Standard
Termin używany do opisu kwantu danych używanego przez dany protokół.
 Składa się z nagłówka (ang.
 header), danych (ang.
 payload) oraz opcjonalnego 
\begin_inset Quotes pld
\end_inset

trailera
\begin_inset Quotes prd
\end_inset

 (pol.
 stopka).
 W zależności od protokołu z perspektywy którego prowadzona jest analiza
 danymi może być datagram innego protokołu, prowadzi to do struktury kapsułkowej.
 Datagram najniższej warstwy zawierał będzie szereg headerów kolejnych protokołó
w oraz finalne dane i trailer.
 Ilustruje to rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:datagram"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/payload.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Przykładowy datagram protokołu HTTP w sieci TCP/IP
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "rys:datagram"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
TCP
\end_layout

\begin_layout Standard
Protokół warstwy transportowej.
 Odpowiada za komunikację pomiędzy dwoma urządzeniami, tzw.
 hostami, komunikującymi się za pomocą sieci internetowej.
 Z perspektywy użytkownika najważniejszymi cechami protokołu TCP są:
\end_layout

\begin_layout Itemize
uporządkowany przesył danych (ang.
 ordered data transfer)
\end_layout

\begin_layout Itemize
retransmisja zgubionych pakietów (ang.
 packet retranssmision)
\end_layout

\begin_layout Itemize
zgodność danych nadanych z odebranymi (ang.
 error-free transmission)
\end_layout

\begin_layout Itemize
kontrola przepływu do odbiorcy (ang.
 flow control)
\end_layout

\begin_layout Itemize
kontrola przepływu po sieci (ang.
 congestion control)
\end_layout

\begin_layout Standard
TCP jest protokołem stanowym, wymaga otwarcia połączenia (ang.
 connection) do którego należą wysyłane pakiety.
 Dane odbierane od nadawcy oraz dostarczane do klienta nie posiadają wymagań
 co do struktury, traktowane są jak strumień bajtów (ang.
 bytestream), którego przygotowanie i odczytanie zgodnie z wybranym zestawem
 reguł - protokołem warstwy aplikacji.
 Początek i koniec strumienia sygnalizują odpowiednie sekwencje kontrolne
 protokołu.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Wstawić tu tcp header?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Sekwencja otwarcia połączenia
\end_layout

\begin_layout Standard
Nagłówek TCP posiada 9 bitów kontrolnych posiadających odpowiednie 3 literowe
 skróty:
\end_layout

\begin_layout Itemize
CWR
\end_layout

\begin_layout Itemize
ECE
\end_layout

\begin_layout Itemize
URG
\end_layout

\begin_layout Itemize
ACK
\end_layout

\begin_layout Itemize
PSH
\end_layout

\begin_layout Itemize
RST
\end_layout

\begin_layout Itemize
SYN
\end_layout

\begin_layout Itemize
FIN
\end_layout

\begin_layout Standard
Do nawiązania połączenia wykorzystywane są bity SYN oraz ACK, w nawiązaniu
 połączenia wyróżniamy klienta - stronę nawiązującą połączenie oraz serwer
 - stronę nasłuchującą.
 Sekwencja ma następującą postać.
\end_layout

\begin_layout Enumerate
Klient wysyła pakiet z flagą SYN
\end_layout

\begin_layout Enumerate
Serwer odpowiada pakietem z flagami SYN oraz ACK
\end_layout

\begin_layout Enumerate
Klient wysyła pakiet z flagą ACK
\end_layout

\begin_layout Standard
Po odebraniu ostatniego pakietu sesję uznaje się za poprawnie zainicjowaną
 i obie strony mogą przejść do przesyłu i odbioru danych.
\end_layout

\begin_layout Subsubsection*
Retransmisje
\end_layout

\begin_layout Standard
Nagłówek pakietu TCP posiada dwa 32 bitowe pola służące śledzeniu kolejności
 pakietów i potwierdzenia ich odbioru.
 Są to odpowiednio numer sekwencyjny (ang.
 sequence number) oraz numer potwierdzenia (ang.
 acknowledgement number).
 Na każdy wysłany pakiet o danym numerze sekwencyjnym N oczekiwany jest
 pakiet nadany przez serwer z flagą ACK oraz numerem sekwencyjnym o wartości
 N.
\end_layout

\begin_layout Standard
Potrzebę retransmisji można zidentyfikować na podstawie przekroczenia wartości
 oczekiwania (ang.
 timeout) na potwierdzenie danego pakietu oraz bazując na otrzymanej sekwencji
 potwierdzeń.
 Ilustruje to poniższy przykład.
\end_layout

\begin_layout Standard
W przypadku gdy pakiet zostanie zgubiony (o numerze sekwencyjnym N+1), zgodnie
 z protokołem odbiorca nie może wysłać pakietu ACK z wartością N+1 ani żadną
 następną aż do otrzymania pakietu, ponownie wysyła więc pakiet ACK dla
 ostatniego poprawnie odebranego pakietu (numer N).
 Otrzymanie trzykrotnie potwierdzenia dla pakietu N sygnalizuje nadawcy
 potrzebę retransmisji pakietu N+1.
\end_layout

\begin_layout Subsubsection*
Sekwencja zamknięcia
\end_layout

\begin_layout Standard
Poprawne zamknięcie sesji wykorzystuje flagi FIN oraz ACK.
 Może zostać zainicjowana przez każdą ze stron.
 Na potrzeby przykładu użyte zostały nazwy inicjator i odbiorca.
\end_layout

\begin_layout Enumerate
Inicjator wysyła pakiet z flagą FIN
\end_layout

\begin_layout Enumerate
Odbiorca wysyła pakiet z flagą ACK
\end_layout

\begin_layout Enumerate
Odbiorca wysyła pakiet z flagą FIN
\end_layout

\begin_layout Enumerate
Inicjator wysyła pakiet z flagą ACK
\end_layout

\begin_layout Standard
Kroki 2 oraz 3 mogą zostać zrealizowane za pomocą jednego pakietu wysłanego
 przez odbiorcę.
 Wysłanie pakietu FIN przez nadawcę sygnalizuje odbiorcy że nie otrzyma
 od niego więcej danych, sesję zamkniętą z jednej strony nazywamy half-open
 (pol.
 pół-otwartą).
\end_layout

\begin_layout Subsection*
UDP
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
czy udp jest w ogóle interesujące z perspektywy pracy?
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Berkeley sockets
\end_layout

\begin_layout Standard
API (ang.
 application programming interface) służący do realizowania komunikacji
 za pomocą gniazd (ang.
 socket).
 Pozwala na użycie protokołów transportowych, zarówno sieciowych (TCP, UDP)
 jak i realizujących komunikację pomiędzy procesami na jednej maszynie (Unix
 Sockets).
 Zostały wprowadzone w wersji 4.2 systemu operacyjnego BSD z rodziny Unix
 w 1983 roku.
 Ze względu na szerokie stosowanie stały się częścią standardu POSIX.
 Obecnie dostępne we wszystkich systemach spełniających ten standard oraz
 od 1990 w systemach z rodziny Windows.
 
\begin_inset CommandInset citation
LatexCommand cite
key "winsocks"

\end_inset


\end_layout

\begin_layout Standard
Socket jest abstrakcyjnym obiektem za pomocą którego dany proces prowadzi
 interakcje z innym procesem lokalnym bądź zdalnym.
 Elementem pośredniczącym w takiej komunikacji jest jądro systemu operacyjnego
 mające dostęp do innych procesów w przypadku komunikacji lokalnej oraz
 do sterowników kart sieciowych w przypadku komunikacji zdalnej.
\end_layout

\begin_layout Standard
Wydziela się dwa główne tryby pracy z gniazdami:
\end_layout

\begin_layout Itemize
pakietowy
\end_layout

\begin_layout Itemize
strumieniowy
\end_layout

\begin_layout Standard
Podział ten jest ściśle związany z protokołami które reprezentuje socket.
 Tryb pakietowy zakłada wysyłanie i odbieranie pojedynczych pakietów, tryb
 strumieniowy otwiera zaś pomost za pomocą którego wysyłana jest arbitralna
 ilość danych.
 Obie funkcjonalności realizuje się za pomocą tego samego zestawu funkcji
 systemowych jednak różni się obsługa informacji zwrotnej z wywołania.
\end_layout

\begin_layout Standard
API dostarczane jest użytkownikowi w postaci zestawu plików nagłówkowych
 oraz bibliotek dynamicznie linkowanych języka C.
 Taki sposób udostępniania podyktowany jest językiem w jakim napisane są
 systemy operacyjne - zarówno Windows jak i Linux napisane zostały w C -
 oraz możliwością wywoływania tego typu interfejsów w innych językach.
 Przykładowo pliki wykonywalne języka C++ można automatycznie linkować z
 bibliotekami w języku C, język Python udostępnia do tego bibliotekę ctypes
 oraz uogólniony język Cython.
 W przypadku języków interpretowanych implementacje maszyn wirtualnych napisane
 są w języku C co pozwala na udostępnienie tego interfejsu w językach bazujących
 na danej maszynie wirtualnej - przykładem będzie tu JVM oraz języki Java,
 Scala i Kotlin.
\end_layout

\begin_layout Subsection*
Opis interfejsu
\end_layout

\begin_layout Standard
Tabela 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:socket_calls"

\end_inset

 zawiera zestaw wywołań wymagany do rozpoczęcia komunikacji za pomocą dowolnego
 protokołu z użyciem gniazd w systemie operacyjnym Linux.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="35page%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nazwa Wywołania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Plik nagłówkowy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Opis
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
socket()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tworzy nowe gniazdo zadanego typu oraz zwraca jego deskryptor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bind()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Łączy gniazdo z systemowym zasobem, w przypadku protokołu TCP jest to para
 (adres ip, port) reprezentująca port na konkretnym interfejsie sieciowym.
 Używany po stronie serwera.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
listen()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ustawia socket w tryb pasywny, nasłuchujący na przychodzące połączenia.
 Używany po stronie serwera.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
connect()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nawiązuje połączenie na zadany adres, przydzielając losowy port z puli 1024-6553
5.
 Używany po stronie klienta.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
accept()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tworzy nowy socket reprezentujący nawiązane połączenie po stronie klienta,
 wywołanie używane po stronie serwera.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
recv()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h.>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Służy odbieraniu danych z socketu.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
send()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Służy nadawaniu danych za pomocą socketu.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
shutdown()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inicjuje sekwencję zamykającą dane połączenie.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
close()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<unistd.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zwalnia zasoby systemowe odpowiadające danemu socketowi.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getsockopt()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sprawdza dany atrybut gniazda.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
setsockopt()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/socket.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ustawia dany atrybut gniazda.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
select()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<sys/select.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pozwala uśpić dany wątek systemowy do czasu pojawienia się danych na jednym
 bądź więcej socketach.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
poll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<poll.h>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Analogicznie do select(), pozwala również zakończyć oczekiwanie po interwale
 bądź sprawdzić dostępność danych nie blokując obecnego wątku.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Funkcje interfejsu socket 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:socket_calls"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Parametry danego wywołania oraz dokładny opis można uzyskać wpisując w konsoli
 polecenie:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

man <nazwa wywołania bez nawiasów>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wynik polecenia dla wywołania connect() przedstawia rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:man_connect"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/man_connect.JPG
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Opis wywołania connect()
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "rys:man_connect"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Nawiązywanie połączenia TCP
\end_layout

\begin_layout Standard
Po stronie serwera wymagane są następujące czynności:
\end_layout

\begin_layout Enumerate
Zdefiniowanie struktury typu sockaddr_in zawierającej informacje o typie
 adresu oraz jego wartości, w przypadku TCP będzie to rodzina AF_INET reprezentu
jąca adres protokołu IP oraz port protokołu TCP.
\end_layout

\begin_layout Enumerate
Stworzenie gniazda za pomocą wywołania funkcji socket() z parametrami AF_INET,
 SOCK_STREAM, IPPROTO_TCP
\end_layout

\begin_layout Enumerate
Skojarzenie adresu oraz gniazda za pomocą funkcji bind()
\end_layout

\begin_layout Enumerate
Rozpoczęcie nasłuchiwania, tzw.
 otworzenie portu, za pomocą funkcji listen()
\end_layout

\begin_layout Enumerate
Wywołanie funkcji accept() tworzącej nowe gniazdo dla każdego połączenia
 przychodzącego
\end_layout

\begin_layout Enumerate
Interakcje z procesem zdalnym używając funkcji recv() oraz send()
\end_layout

\begin_layout Enumerate
Zamknięcie połączenia używając funkcji shutdown()
\end_layout

\begin_layout Enumerate
Zwolnienie gniazd odpowiadających za połączenie funkcją close()
\end_layout

\begin_layout Standard
Kod reprezentujący powyższe czynności reprezentuje listing 
\begin_inset Note Note
status open

\begin_layout Plain Layout
jak to tagować?
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define ADRES_SERWERA "127.0.0.1"
\end_layout

\begin_layout Plain Layout

#define PORT_SERWERA 15123
\end_layout

\begin_layout Plain Layout

#define DLUGOSC_KOLEJKI_OCZEKUJACYCH_POLACZEN 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout

  struct sockaddr_in endpoint = {
\end_layout

\begin_layout Plain Layout

    .sin_family = AF_INET,
\end_layout

\begin_layout Plain Layout

    .sin_port = htons(PORT_SERWERA),
\end_layout

\begin_layout Plain Layout

    .sin_addr.s_addr = inet_addr(ADRES_SERWERA)
\end_layout

\begin_layout Plain Layout

  };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  int socket_descriptor = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  bind(socket_descriptor, (struct sockaddr*)&endpoint, sizeof(endpoint));
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  listen(socket_descriptor, DLUGOSC_KOLEJKI_OCZEKUJACYCH_POLACZEN);
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  for (;;) {
\end_layout

\begin_layout Plain Layout

    int connection_descriptor = accept(socket_descriptor, NULL, NULL);
\end_layout

\begin_layout Plain Layout

    /*
\end_layout

\begin_layout Plain Layout

      Interakcje z klientem
\end_layout

\begin_layout Plain Layout

    */
\end_layout

\begin_layout Plain Layout

    shutdown(connection_descriptor, SHUT_RDWR);
\end_layout

\begin_layout Plain Layout

    close(connection_descriptor);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
W programie odwołania do danego gniazda wykonywane są za pomocą unikalnego
 numeru nadawanego nowo wytworzonemu socketowi.
 Wywołania systemowe następnie mapują ten identyfikator na właściwe zasoby.
 W programie wyróżnione są dwa typy gniazd, służące przyjmowaniu połączeń
 oraz reprezentujące pojedyncze połączenie.
 Funkcja listen inicjuje kolejkę w jądrze systemu operacyjnego, pozwala
 ona na przechowanie połączeń przychodzących do czasu gdy program jest w
 stanie je obsłużyć.
\end_layout

\begin_layout Standard
Od strony klienckiej wymagane są następujące kroki:
\end_layout

\begin_layout Enumerate
Stworzenie struktury reprezentujący adres ip oraz port z którym nawiązane
 zostanie połączenie
\end_layout

\begin_layout Enumerate
Stworzenie gniazda używając funkcji socket() z parametrami odpowiadającymi
 połączeniu TCP
\end_layout

\begin_layout Enumerate
Wywołanie funkcji connect() przekazując adres z punktu 1 oraz socket z punktu
 2.
\end_layout

\begin_layout Enumerate
Interakcje za pomocą gniazda używając funkcji send() i recv()
\end_layout

\begin_layout Enumerate
zamknięcie połączenia funkcją shutdown()
\end_layout

\begin_layout Enumerate
zwolnienie deskryptora funkcją close()
\end_layout

\begin_layout Standard
Kod reprezentujący klienta łączącego się z serwerem z listingu 
\begin_inset Note Note
status open

\begin_layout Plain Layout
tego wyżej
\end_layout

\end_inset

 przedstawia listing 
\begin_inset Note Note
status open

\begin_layout Plain Layout
otaguj to jakos
\end_layout

\end_inset

.
 Ponownie pominięto obsługę błędów.
 Oba programy znajdują się w załącznikach do pracy.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define ADRES_SERWERA "127.0.0.1"
\end_layout

\begin_layout Plain Layout

#define PORT_SERWERA 15123
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

  struct sockaddr_in endpoint = {
\end_layout

\begin_layout Plain Layout

    .sin_family = AF_INET,
\end_layout

\begin_layout Plain Layout

    .sin_port = htons(PORT_SERWERA),
\end_layout

\begin_layout Plain Layout

    .sin_addr.s_addr = inet_addr(ADRES_SERWERA)
\end_layout

\begin_layout Plain Layout

  };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  int socket_descriptor = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  connect(socket_descriptor, (struct sockaddr*)&endpoint, sizeof(endpoint));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  /*
\end_layout

\begin_layout Plain Layout

    interakcje z serwerem
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  shutdown(socket_descriptor, SHUT_RDWR);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  close(socket_descriptor);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
W tym wypadku tworzony jest jedynie socket reprezentujący połączenie.
 Wywołanie funkcji connect wymaga, aby urządzenie reprezentujące drugą stronę
 połączenia posiadało socket w stanie listen, w momencie kiedy kod serwera
 wywoła instrukcję accept.
 Pełny schemat interakcji klient serwer reprezentuje rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:client_server"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/klient_serwer_berkeley.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Komunikacja klient serwer z użyciem gniazd
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "rys:client_server"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Budowa socketu
\end_layout

\begin_layout Standard
Stos sieciowy, będący w systemach z rodziny Windows i Linux częścią jądra
 systemu operacyjnego dla każdego aktywnego połączenia utrzymuje strukturę
 danych TCB (ang.
 TCP control block) oraz dwa bufory, do obsługi danych wychodzących i przychodzą
cych.
 Za nadawanie i odbieranie danych odpowiedzialna jest karta sieciowa, która
 za pomocą zdefiniowanego mechanizmu (przerwanie lub odpytywanie przez jądro)
 raportuje przychodzące dane.
 Dane te są następnie szeregowane zgodnie z numerami sekwencyjnymi i składowanie
 w buforze przychodzącym do momentu odebrania ich przez klienta przy użyciu
 funkcji recv().
\end_layout

\begin_layout Standard
Socket obsługujący połączenie po stronie jądra składa się ze struktury kontrolne
j TCP (ang.
 TCP control block) reprezentującej stan połączenia oraz zestaw parametrów
 opisujących połączenie (częstotliwość wysyłania, numer sekwencyjny, licznik
 bezczynności) oraz dwie kolejki, odpowiadające za dane przychodzące oraz
 wychodzące.
\end_layout

\begin_layout Standard
Za nadawanie i odbieranie bezpośrednio odpowiada NIC (ang.
 network interface card) karta sieciowa.
 Której sterownik współpracując z tzw.
 stosem sieciowym odpowiada za poprawne stworzenie bądź zinterpretowanie
 nagłówków kolejnych warstw stosu TCP/IP i umieszczenie bądź pobranie danych
 w kolejkach.
 Sytuację przedstawia rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:tcp_socket_stack"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/socket_example.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Elementy odpowiedzialne za komunikację TCP z użyciem socketów
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "rys:tcp_socket_stack"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Analiza problemu
\begin_inset CommandInset label
LatexCommand label
name "chap:opis_problemu"

\end_inset


\end_layout

\begin_layout Standard
Katedra metrologii prowadzi badania dotyczące odczytu informacji o pojazdach
 poruszających się po drodze za pomocą zestawu sensorów.
 Czujniki takie zostały zamontowane na odcinku autostrady w miejscowości
 Gardawice 
\begin_inset Note Note
status open

\begin_layout Plain Layout
[link do papieru]
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/stanowisko_pomiarowe.JPG
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat stanowiska pomiarowego 
\begin_inset Note Note
status open

\begin_layout Plain Layout
(dodac ref do oryginalu)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
W skład stanowiska pomiarowego wchodzą czujniki spięte z układem przetwarzania
 do postaci cyfrowej, kamera oraz komputer.
 Oprogramowanie napisane w środowisku LabVIEW odpowiada za zapisanie na
 dysku przebiegów czasowych sygnałów oraz sekwencji video zarejestrowanych
 w trakcie przejazdu pojazdu.
\end_layout

\begin_layout Standard
Komputer służący do przechowywania pomiarów jest również podłączony do sieci.
 Pomiędzy stanowiskiem pomiarowym a komputerem na uczelni zestawiony jest
 tunel VPN.
 Pozwala to na zdalne zarządzanie środowiskiem przy jednoczesnym zapewnieniu
 bezpieczeństwa komunikacji (szyfrowanie, uwierzytelnienie, integralność
 danych).
\end_layout

\begin_layout Section*
Struktura generowanych danych
\end_layout

\begin_layout Standard
Każdy pomiar - przejazd pojazdu - generuje dwa pliki.
 Pomiary o rozszerzeniu lvm który posiada strukturę csv (ang.
 comma separated values) oraz wideo w formacie avi (ang.
 Audio Video Interleave).
 Pliki te posiadają tą samą nazwę oraz rozszerzenie odpowiednio avi i lvm,
 zgodną ze schematem przedstawionym w tabeli 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nazwa_pliku"

\end_inset

 oraz ścieżkę o regularnej strukturze zgodną ze schematem przedstawionym
 w tabeli 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nazwa_folderu"

\end_inset

.
 Wszystkie ścieżki znajdują się w jednym katalogu głównym.
\end_layout

\begin_layout Standard
Komórki pogrubione w tabelach 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nazwa_pliku"

\end_inset

 i 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nazwa_folderu"

\end_inset

 stanowią zmienne zależne od momentu wygenerowania pliku.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="8">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Rok
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Miesiąc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Dzień
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
_
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Godzina
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Minuta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Sekunda
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat nazwy generowanego pliku
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:nazwa_pliku"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nazwa pliku koduje czas wykonania pomiaru, dokładny schemat generowanej
 nazwy reprezentuje tabela 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nazwa_pliku"

\end_inset

.
 Pliki zaś grupowane są w foldery odpowiadające dniom w których zostały
 wygenerowane.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Rok
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
_
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Miesiąc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
_
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Dzień
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat nazwy generowanego folderu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:nazwa_folderu"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Schemat posiada dwa zaburzenia.
\end_layout

\begin_layout Itemize
Pomiary zarejestrowane tuż przed północą mogą znaleźć się w folderze następnego
 dnia
\end_layout

\begin_layout Itemize
Plik avi może nie zostać wygenerowany
\end_layout

\begin_layout Standard
Na potrzeby oszacowania generowanych danych przeanalizowano zestaw wygenerowany
 pomiędzy 11.11.2017 a 10.12.2017.
 W tym przedziale czasowym stanowisko pobierało pomiary bez przerw które
 mogłyby zaburzyć dalsze oszacowania takich jak przerwy w zasilaniu czy
 zapełnienie powierzchni dyskowej.
\end_layout

\begin_layout Standard
Dziennie generowanych jest ok.
 6 tysięcy par plików.
 Ilość pomiarów jest ściśle związana z natężeniem ruchu drogowego, stąd
 można zakładać okresowe wahania spowodowane np.
 świętami (dopytać promotora w co wyzwala pomiar i.e, czy to nie leci cały
 czas i robię analizę na podstawie danych na darmo).
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Typ pliku
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
średnia wielkości [B]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mediana wielkości [B]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
odchylenie standardowe [B]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lvm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
838487
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
840305
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6773
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
avi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
504104
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
555008
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
133490
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Jakieś tam własności plików generowanych
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:wielkosci_plikow"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zgodnie z tabelą 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:wielkosci_plikow"

\end_inset

 pliki avi posiadają o 2 rzędy wielkości większą wariancję niż pliki avi,
 należy więc spodziewać się skokowych zmian w obciążeniu systemu wysyłania
 rozumianego jako wartość strumienia danych na sekundę.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/wielkosci_dobowe_avi.jpeg
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Zależność wielkości pliku avi od momentu pomiaru
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "rys:wielkosc_avi"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rysunek 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:wielkosc_avi"

\end_inset

 przedstawia zależność wielkości filmu (pliku avi) od godziny jego wykonania,
 uśrednienie zostało dokonane z dokładnością do minut.
 Najistotniejsze zmiany wielkości plików występują ok godziny 7 oraz 16
 które w analizowanym okresie pokrywają się z godzinami wschodu i zachodu
 słońca.
 Na podstawie wykresu można stwierdzić, że zmiana związana z cyklem słonecznym
 jest najistotniejszym składnikiem wariancji.
\end_layout

\begin_layout Standard
Na wykresie można zaobserwować również zerowy pomiar, w projekcie aplikacji
 należy zatem uwzględnić możliwość obsłużenia takiego wypadku.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/wielkosci_dobowe_lvm.jpeg
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Zależność wielkości pliku lvm od momentu pomiaru
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "rys:wielkosci_lvm"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rysunek 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:wielkosci_lvm"

\end_inset

został wyskalowany podobnie do 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:wielkosc_avi"

\end_inset

.
 Dzięki temu zabiegowi można zauważyć różnicę w zmienności wielkości obu
 typów plików.
 Elementem wartym odnotowania jest kolejna 
\begin_inset Quotes pld
\end_inset

szpilka
\begin_inset Quotes prd
\end_inset

 oznaczająca pomiar zerowej wielkości.
\end_layout

\begin_layout Standard
Wewnętrzna struktura poszczególnych typów plików jest ściśle związana z
 zastosowanymi schematami kompresji i zostanie omówiona w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:kompresja"

\end_inset

.
\end_layout

\begin_layout Subsection*
Średni strumień danych
\end_layout

\begin_layout Standard
Metryką użytą do planowania struktury rozwiązania został średni strumień
 danych, jego wartość wyliczona została dzieląc sumę danych wygenerowanych
 w ciągu badanego okresu przez ilość sekund składających się na ten okres.
 
\end_layout

\begin_layout Standard
\begin_inset Formula $S=\frac{V}{T}\,[\frac{B}{s}]$
\end_inset

, s - strumień, V - ilość danych w bajtach, T - czas
\end_layout

\begin_layout Standard
Obliczenia przeprowadzono dla 30 pełnych dni (11.11 - 10.12) po 24 godziny.
\end_layout

\begin_layout Standard
\begin_inset Formula $T=30*24*60*60=2592000\,s$
\end_inset


\end_layout

\begin_layout Standard
Sumaryczny strumień danych obliczony na podstawie danych z plików lvm_results.csv
 oraz avi_results.csv.
 Zawierają one kolumny z czasem pomiaru oraz wielkością pliku z danymi pomiarowy
mi.
 Zostały one wygenerowane na podstawie stanu przestrzeni dyskowej stanowiska
 pomiarowego w dniu 20.02.2018r.
 Dostępne do wglądu w <gdziekolwiek ta praca będzie dostępna>.
\end_layout

\begin_layout Standard
\begin_inset Formula $V_{avi}=84359710\,kB$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $V_{lvm}=140709087\,kB$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $V=V_{avi}+V_{lvm}=225068797kB$
\end_inset


\end_layout

\begin_layout Standard
Na podstawie powyższych danych średni strumień wynosi.
\end_layout

\begin_layout Standard
\begin_inset Formula $S=\frac{225068797\,kB}{2592000\,s}\approx86.8\,\frac{kB}{s}$
\end_inset


\end_layout

\begin_layout Standard
Należy również pamiętać o zmienności dobowej w wielkości plików avi.
\end_layout

\begin_layout Section*
Łącze sieciowe
\end_layout

\begin_layout Standard
Prędkość przesyłu danych ze stanowiska pomiarowego do uczelni została zmierzona
 za pomocą programu scp, użyty został do tego celu plik ze skompresowanymi
 pomiarami z jednego dnia 
\begin_inset Note Note
status open

\begin_layout Plain Layout
(TODO: w sumie to i tak idzie w tunelu, wpadł tam narzut na szyfrowanie,
 jak wstanie trzeba powtórzyć na gołym tcp, np netcatem).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Średnia przepustowość wewnątrz tunelu została oszacowana na 12 kb/s jest
 to wielkość ponad 4 razy mniejsza od średniego strumienia danych.
 Uniemożliwia to bezpośrednie zastosowanie standardowych narzędzi stosowanych
 do przesyłania plików FTP (ang.
 File Transfer Protocol), SCP (ang.
 Secure Copy Protocol) czy program rsync.
\end_layout

\begin_layout Standard
W obecnym schemacie pracy stanowiska odbiór danych wymaga manualnego przekopiowa
nia pomiarów na nośnik i przewiezienia ich na uczelnię.
\end_layout

\begin_layout Standard
co uniemożliwia przesył danych w czasie rzeczywistym przy zastosowaniu standardo
wych rozwiązań takich jak FTP (ang.
 File Transfer Protocol), SCP (ang.
 Secure Copy Protocol) czy program rsync.
 Odbiór danych wymaga fizycznego dostępu do maszyny i przekopiowania danych
 na inny nośnik bądź zastosowania kompresji.
 Szerszy opis relacji przepustowości do kompresji został przedstawiony w
 rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:kompresja"

\end_inset

.
\end_layout

\begin_layout Standard
Drugim istotnym aspektem połączenia jest jego dostępność, zaobserwowane
 zostały przerwy w łączności sięgające tygodnia.
\end_layout

\begin_layout Section*
Wymagania projektowe
\end_layout

\begin_layout Standard
Analiza stanowiska pomiarowego prowadzi do następujących wniosków.
\end_layout

\begin_layout Itemize
Ilość danych generowanych przez stanowisko pomiarowe nie jest stała w czasie
\end_layout

\begin_layout Itemize
Częstotliwość pojawiania się nowych plików jest zmienna
\end_layout

\begin_layout Itemize
Dane składowane są w podkatalogach konkretnego katalogu na dysku
\end_layout

\begin_layout Itemize
Przepustowość łącza nie pozwala na bezpośredni przesył danych, wymagana
 jest kompresja
\end_layout

\begin_layout Itemize
Aplikacja zapisująca dane na dysku nie posiada mechanizmu pozwalającego
 na rozgłoszenie 
\begin_inset Quotes pld
\end_inset

zdarzenia
\begin_inset Quotes prd
\end_inset

 utworzenia nowego pliku
\end_layout

\begin_layout Itemize
Wielkość plików avi posiada zdecydowanie większą zmienność niż lvm.
\end_layout

\begin_layout Itemize
Nazwy plików posiadają regularną strukturę, pozwala to na ich porządkowanie
 w czasie bez użycia metadanych pliku
\end_layout

\begin_layout Standard
Wymagania projektowe:
\end_layout

\begin_layout Itemize
Dane dostarczone na serwer uczelni mają zachować informacje kluczowe do
 dalszej obróbki, w przypadku plików sygnałowych/video nie wyklucza to kompresji
 stratnej
\end_layout

\begin_layout Itemize
System ma automatycznie nawiązywać ponowne połączenie w przypadku problemów
 z siecią, przewidywana jest duża niestabilność połączenia sieciowego.
\end_layout

\begin_layout Itemize
W przypadku utraty połączenia sieciowego aplikacja ma być w stanie przechować
 informacje o generowanych plikach i ponowić wysyłanie po odzyskaniu połączenia
\end_layout

\begin_layout Itemize
Parametry działania mają mieć formę konfigurowalną w postaci przełączników
 przy starcie aplikacji bądź plików konfiguracyjnych
\end_layout

\begin_layout Standard
Wymagane parametry konfigurowalne:
\end_layout

\begin_layout Itemize
Adres klienta
\end_layout

\begin_layout Itemize
Adres serwera
\end_layout

\begin_layout Itemize
Ścieżka do folderu w którym generowane są pomiary
\end_layout

\begin_layout Itemize
Ścieżka do folderu na przesłane pomiary
\end_layout

\begin_layout Itemize
Mapowanie pomiędzy typami plików a schematami kompresji
\end_layout

\begin_layout Itemize
Lista typów plików do przesłania
\end_layout

\begin_layout Chapter
Projekt systemu
\begin_inset CommandInset label
LatexCommand label
name "chap:Projekt-systemu"

\end_inset


\end_layout

\begin_layout Standard
Podsumowując informacje z rozdziału 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:opis_problemu"

\end_inset

 zadaniem aplikacji jest przesłanie danych z komputera będącego częścią
 stanowiska pomiarowego do maszyny służącej składowaniu danych na terenie
 uczelni.
 Podstawowym zadaniem systemu jest:
\end_layout

\begin_layout Enumerate
Pobranie danych ze stanowiska pomiarowego
\end_layout

\begin_layout Enumerate
Bezstratny przesył sieciowy
\end_layout

\begin_layout Enumerate
Zapisanie danych na serwerze
\end_layout

\begin_layout Standard
Ograniczenia projektu:
\end_layout

\begin_layout Itemize
Aplikacja zapisująca dane z kart pomiarowych do dysku nie może być modyfikowana
\end_layout

\begin_layout Itemize
Przepustowość łącza jest mniejsza niż strumień danych generowanych przez
 stanowisko pomiarowe
\end_layout

\begin_layout Itemize
Połączenie pomiędzy stanowiskiem pomiarowym a uczelnią jest często zrywane
\end_layout

\begin_layout Itemize
Przepustowość łącza jest niższa niż strumień danych generowanych przez stanowisk
o
\end_layout

\begin_layout Itemize
Instalacja dodatkowych programów/bibliotek na maszynie stanowiska pomiarowego
 jest trudna ze względu na problemy z połączeniem i przepustowością
\end_layout

\begin_layout Standard
Dla uproszczenia opisu projektu w pracy użyty został zestaw pojęć dodatkowych.
\end_layout

\begin_layout Itemize

\series bold
Host - 
\series default
odnosi się do komputera podpiętego do sieci.
\end_layout

\begin_layout Itemize

\series bold
Windows - 
\series default
host będący częścią stanowiska pomiarowego.
 Od zainstalowanego systemu operacyjnego.
\end_layout

\begin_layout Itemize

\series bold
Linux - 
\series default
host na terenie uczelni.
 Od zainstalowanego systemu operacyjnego.
\end_layout

\begin_layout Itemize

\series bold
Serwis - 
\series default
aplikacja działająca na danym hoście.
 Jeden host może mieć wiele uruchomionych serwisów.
 
\end_layout

\begin_layout Itemize

\series bold
Labview - 
\series default
serwis odpowiedzialny za odebranie danych z kart pomiarowych i zapis na
 dysku.
 Od języka programowania w którym napisano aplikację.
\end_layout

\begin_layout Itemize

\series bold
Sender
\series default
 
\series bold
-
\series default
 serwis odpowiedzialny za interakcję z labview znajdujący się na windowsie.
 
\end_layout

\begin_layout Itemize

\series bold
Receiver
\series default
 
\series bold
-
\series default
 serwis odpowiedzialny za zapisywanie danych na hoście uczelnianym.
\end_layout

\begin_layout Standard
Wymóg zastosowania kompresji oraz brak możliwości modyfikowania labview
 wprowadza potrzebę umieszczenia na windowsie serwisu którego zadaniami
 są:
\end_layout

\begin_layout Itemize
Monitorowanie stanu maszyny w poszukiwaniu nowych plików
\end_layout

\begin_layout Itemize
Kompresja zgodnie z zadanym schematem
\end_layout

\begin_layout Itemize
Transmisja skompresowanych danych
\end_layout

\begin_layout Standard
Zadaniami aplikacji na hoście uczelnianym jest:
\end_layout

\begin_layout Itemize
Odebranie transmitowanych danych
\end_layout

\begin_layout Itemize
Dekompresja, jeśli potrzebna
\end_layout

\begin_layout Itemize
Zapisanie danych na dysku twardym maszyny
\end_layout

\begin_layout Standard
Serwis labview w momencie analizowania problemu nie posiadał możliwości
 raportowania zapisania nowych danych.
 Utrzymanie takiego stanu rzeczy, gdzie serwis labview jest nieświadomy
 istnienia innego serwisu odpowiedzialnego za pobór i wysyłanie danych wymaga
 aktywnego monitorowania danej części systemu operacyjnego.
 Do realizacji monitoringu tego typu zdarzeń można zastosować dwa podejścia.
\end_layout

\begin_layout Enumerate
Zaimplementowanie logiki monitorującej stan dysku w interwałach w ramach
 serwisu Sender.
\end_layout

\begin_layout Enumerate
Użycie systemowego interfejsu służącego monitorowaniu plików, takiego jak
 subsystem Inotify 
\begin_inset CommandInset citation
LatexCommand cite
key "inotify"

\end_inset

 bądź funckja ReadDirectoryChangesW 
\begin_inset CommandInset citation
LatexCommand cite
key "wininotify"

\end_inset

 w systemach Windowsowych
\end_layout

\begin_layout Standard
Wadą podejścia pierwszego jest opóźnienie rozpoczęcia wysyłania względem
 faktycznego pojawienia się danych na dysku, wymaga to zastosowania dodatkowego
 wątku odpowiedzialnego za tą jedną czynność.
 Podejście drugie narzuca zaś dwa istotne ograniczenia, aplikacja używająca
 interfejsu danego systemu operacyjnego nie może zostać uruchomiona na innym
 bez zmian w kodzie oraz interfejsy te są bibliotekami w języku C co wymaga
 napisania aplikacji w tym języku bądź zastosowania technik pozwalających
 na wywołanie ich w innych językach.
 Interfejsy tego typu są kompleksowe i wymagają istotnego nakładu pracy
 na poprawne zastosowanie.
\end_layout

\begin_layout Standard
W projekcie zastosowano alternatywne podejście, serwis Labview nasłuchuje
 na połączenia TCP przychodzące z tej samej maszyny na wybranym porcie.
 
\end_layout

\begin_layout Section
Warstwa sieciowa
\begin_inset CommandInset label
LatexCommand label
name "chap:warstwa_sieciowa"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Posix jest pikny a windows niekoniecznie.
 Struktura na linuchu to drzewo o jednym rodzicu, partycje można montować
 jakkolwiek.
 Windows uczynił z partycji najważniejszych mieszkańców, w pracy zastosowano
 unifikację do modelu posixowego ze względu na większe doświadczenie autora
 i niechęć do windy.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Kompresja
\end_layout

\begin_layout Standard
Jak zaznaczono w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:opis_problemu"

\end_inset

dostępna prędkość łącza nie pozwala na przesyłanie plików bez użycia metod
 kompresji, próba takiego działania doprowadziłaby do narastania listy plików
 do wysłania a więc ewentualnego wyczerpania się przestrzeni dyskowej bądź
 pamięci ram i zablokowania dalszego działania systemu wysyłki jak również
 stanowiska pomiarowego.
 W tym rozdziale obliczony zostanie wymagany współczynnik kompresji, przedstawio
ne zostaną wewnętrzne struktury plików, dostępne metody kompresji oraz test
 ich sprawności na podstawie danych pomiarowych z dnia 06.10.2017.
\end_layout

\begin_layout Subsubsection*
Dobor metody kompresji do danych pomiarowych
\end_layout

\begin_layout Standard
Pliki lvm składają się z 7 kolumn, pierwsza reprezentująca indeks próbki
 oraz 6 zawierających wartości sygnałów z kolejnych kanałów (czujników)
 w danym momencie.
 Zobrazowanie przebiegów zawiera rysunek 
\begin_inset CommandInset ref
LatexCommand ref
reference "rys:przykladowe_pomiary"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/przykladowy_przebieg_sygnalow.jpeg
	lyxscale 40
	scale 23

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wizualizacja pomiaru
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "rys:przykladowe_pomiary"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
LVM to tak pod spodem csv rozdzielane tabami, bardzo regularne dane, mozna
 podejrzewac ze istnieja schematy kompresji przeznaczone specjalnie dla
 nich.
 
\end_layout

\begin_layout Plain Layout
Testy wszystkich klasycznych schematow kompresji bezstratnej, poszukac po
 internetach czy nie ma jakiejs rozprawki naukowej na ten temat.
\end_layout

\begin_layout Plain Layout
Przedstawic mozliwosc zastosowania kompresji stratnej na tym algorytmie
 falkowym, wrzucic info ze zostal zaimplementowany w pythonie w ramach pracy,
 zrobic analize za i przeciw do jego zastosowania.
 Pamietac o tym ze przy zerowym sygnale mocno odksztalca.
 Badania ilosciowe j/w (idealnie dane z miesiaca, nie wiem tylko gdzie to
 pomiescic i czy sa dostepne na trafficu gdzies).
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Dobor metody kompresji do danych wideo
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Krotka informacja z jakiego powodu w ogole sa trzymane, sprawdzic jakiej
 jakosci sa obecnie i jak mocno mozna je znieksztalcic.
 Jak pamietam sa to dane pomocnicze do weryfikacji eksperymentow na sygnalach.
\end_layout

\begin_layout Plain Layout
Wsrod sensownych propozycji jest chwilowo h.264 i w sumie tyle, dobrac ze
 dwa.
\end_layout

\begin_layout Plain Layout
Sprawdzic jak jest z licencjami na tego typu kompresje.
\end_layout

\begin_layout Plain Layout
Przetestowac, wybrac ten z najwieksza sprawnoscia i tyle.
 Dobieranie parametrow o ile wystapi zlac i wrzucic w kierunki rozwoju pracy.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Synchronizacja danych
\begin_inset CommandInset label
LatexCommand label
name "chap:synchronizacja_danych"

\end_inset


\end_layout

\begin_layout Standard
Ze względu na niestabilność połączenia pomiędzy komponentami istotną rolę
 w systemie zajmuje mechanizm synchronizacji danych.
 Rozpatrzenia wymagają scenariusze niedostępności każdego z komponentów
 systemu.
 Prawdopodobieństwa wystąpienia danych scenariuszy nie rozkładają się równomiern
ie.
 Tabela 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:scenariusze_bledow"

\end_inset

 przedstawia możliwe scenariusze błędów.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Scenariusze błędów
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nr.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Labview
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Klient
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Serwer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Łącze
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:scenariusze_bledow"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
W tabeli 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:scenariusze_bledow"

\end_inset

 komórki zawierające X oznaczają błąd komponentu.
\end_layout

\begin_layout Standard
W praktyce do podjęcia decyzji o obsłudze błędu potrzebne są trzy informacje.
\end_layout

\begin_layout Itemize
Czy generator danych działa
\end_layout

\begin_layout Itemize
Czy klient działa
\end_layout

\begin_layout Itemize
Czy klient ma połączenie z serwerem
\end_layout

\begin_layout Standard
Pierwsza z informacji jest decydująca dla obsługi synchronizacji, jeśli
 dane nie są generowane nie ma podstaw do przeprowadzania procedury synchronizac
yjnej.
 Do dalszych rozważań o błędach zakładane jest poprawne działanie generatora
 danych.
 Do rozpatrzenia pozostają dwa przypadki.
\end_layout

\begin_layout Subsection*
Zerwanie dostępu do serwera
\end_layout

\begin_layout Standard
Klient w takiej sytuacji zbiera informacje od generatora aktywnie czekając
 na połączenie.
 Aktywne czekanie polega na próbach połączenia co zadany interwał.
 Problematyczne są długie przerwy w połączeniu, mogą one prowadzić do przepełnie
nia pamięci przez kolejkę (bądź przestrzeni dyskowej, w zależności od wybranej
 implementacji kolejki).
 Do obsługi takiej sytuacji wymagana jest logika decydująca o tym czy należy
 nowy rekord dodać do kolejki na podstawie jej obecnego stanu.
 Podobna logika może być zastosowana do usunięcia części zawartości kolejki
 po ponownym nawiązaniu połączenia.
\end_layout

\begin_layout Subsection*
Zatrzymanie działania klienta
\end_layout

\begin_layout Standard
W takiej sytuacji klient po ponownym rozruchu potrzebuje uzyskać informację
 o ostatnim zapisanym i potwierdzonym przez serwer pliku, oraz pierwszym
 poprawnie zaobserwowanym (w rozumieniu odczytania z socketu wystawionego
 przez generator) pliku.
 Wyjątkowo pechowy przypadek który wymaga obsłużenia pojawia się w momencie
 gdy zatrzymanie przypada na czas przejścia skryptu kompresującego dane.
 W takim wypadku wymagane jest również sprawdzenie plików w archiwach.
\end_layout

\begin_layout Standard
Sprawdzenie wszystkich plików znajdujących się w katalogu roboczym i podrzędnych
 a następnie pasujących do kolejki jest rozwiązaniem najprostszym, jednak
 ilość generowanych plików sugeruje zastosowanie heurystyki.
 <tutaj policz pan że jak dziennie 9000 plików to w miesiąc robi się dużo
 bardzo>.
 Schemat działania generatora przyjmuje składowanie danych z każdego dnia
 w oddzielnym katalogu, z tego powodu poszukiwania można ograniczyć do katalogu
 w którym znajduje się ostatni plik poprawnie zapisany na serwerze i wszystkich
 nowszych.
\end_layout

\begin_layout Subsection*
Kolejki dyskowe
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Jednak dziala poprawnie ale to bagno zapewnilo mi godziny debugowania.
 W duzym skrocie pythonowe api do sqlite3 nie mowi wprost w ktorym momencie
 transakcja zostanie zamknieta co prowadzi do mozliwosci zalegania niepotrzebnyc
h wpisow (plikow ktore otrzymaly ack) w bazie dyskowej.
\end_layout

\begin_layout Plain Layout
Sytuacja ta ma miejsce jesli zbiorcza transakcja zawierajaca ostatnia serie
 operacji zostanie przerwana przez nagle zakonczenie pracy klienta.
\end_layout

\begin_layout Plain Layout
Mozliwe gotowe implementacje:
\end_layout

\begin_layout Itemize
Queuelib, wydzielona z popularnej biblioteki scrapy
\end_layout

\begin_layout Itemize
RabbitMQ, platforma twórców frameworku Spring, popularna w komercyjnych
 zastosowaniach
\end_layout

\begin_layout Itemize
Redis, kolejna popularna komercyjnie zabawka zapewniajaca interesujaca wlasnosc
 (persistance) ale jak sami pisza snapshoty sa co pare minut, niezbyt pewne
 w tym przypadku.
 
\end_layout

\begin_layout Plain Layout
Tu epistoła na temat tego że instalowanie czegokolwiek na stanowisku pomiarowym
 jest co najmniej problematyczne.
 Wstawienie jakichś informacji o tym jak duzo walenia sie bylo z sqlite3
 w pythonie i braku kontroli nad czasem trwania transakcji etc.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\noindent
Testy
\begin_inset CommandInset label
LatexCommand label
name "chap:Testy"

\end_inset


\end_layout

\begin_layout Section*
Rozwazane stanowiska testowe
\end_layout

\begin_layout Itemize
Local loopback
\end_layout

\begin_layout Itemize
Virtual Box
\end_layout

\begin_layout Itemize
Docker
\end_layout

\begin_layout Section*
Sposoby ograniczenia mozliwosci sieci w kazdym przypadku
\end_layout

\begin_layout Standard
https://docs.docker.com/engine/userguide/networking/default_network/build-bridges/
\end_layout

\begin_layout Standard
https://github.com/magnific0/wondershaper
\end_layout

\begin_layout Section*
Testowe zbiory danych
\end_layout

\begin_layout Section*
Schemat generatora
\end_layout

\begin_layout Section*
Weryfikacja reczna
\end_layout

\begin_layout Section*
Weryfikacja automatyczna
\end_layout

\begin_layout Chapter
Podsumowanie
\begin_inset CommandInset label
LatexCommand label
name "chap:Podsumowanie"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliografia"
options "bibtotoc,bst/IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
